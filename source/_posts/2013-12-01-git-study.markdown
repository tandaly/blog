---
layout: post
title: "Git学习笔记"
date: 2013-12-01 21:19
comments: true
categories: git学习
keywords: git，git学习，wang9262,push，commit
description: git学习笔记

---

   最近学习了一下git的基本命令，这篇文章是我自己的学习笔记，一来是为了分享，二来是为了以这种方式记下来，日后忘记时可以再来看看，本文会持续更新，把我在用git时遇到的问题以及一些比较好的建议记录下来，欢迎多多交流。
<!--more-->  
![](/images/blogimg/git/git.png) 


1. [git的大致思路](#1)
2. [git的各种命令](#2)
3. [分支](#3)
4. [tag](#4)
5. [更新](#5)
6. [更多](#6)


###<a id="1"></a>git的大致思路
   git分三个区，一个是History（历史记录），Working Directory（工作目录）以及Stage（缓存区）也叫Index（索引）。大致结构如下图所示
   
   ![](/images/blogimg/git/threearea.png) 
   
   ![](/images/blogimg/git/gitmode.png) 
   
   其中History可以看做是一根时间轴，上面布满了各种commit id，这些id都是hash生成的，可以不用去管它，理解成为标识符就好，如下图所示
   ![](/images/blogimg/git/timebar.png) 
   
###<a id="2"></a>git的各种基本命令
####2.1 add命令
`git add filename`就是将当前工作路径下的filename文件添加到缓存区
####2.2 commit命令
`git commit -m ‘some commit info’`将某文件添加到缓存区后，在提交到历史记录，此时git会为你生成一个相应的commit id。
####2.3 log以及reflog命令
`git log`即查看提交日志，此时只有commit的记录没有头指针移动的记录如左图所示

![](/images/blogimg/git/gitlog.png)


`git log --pretty=oneline`即以单行形式显示log日志，如图所示


![](/images/blogimg/git/onelinelog.png)


`git reflog`即查看所有提交日志，以及其他的一些操作，简化了commit id
![](/images/blogimg/git/reflog.png)


####2.4 回到上一次commit会回到指定的commit
`git reset --hard head^`回到上一个commit节点，这个有点HEAD类似C语言的指针，可以指向不同的commit id。
`git reset --hard commit_id(两杠之后无空格)`回到指定的commit节点（commit_id），这里的id时git reflog之后显示的commit id 并非log里面的id。
####2.5 恢复某个修改的文件
`git checkout -- fliename(两杠之后有空格)`，如果修改了某个文件，没有将其add到缓存区，调用该命令，可以恢复到修改之前的内容，即上一次commit之后的内容，如果这个时候已经add此语句无效，需要用下一语句。

![](/images/blogimg/git/check_noadd.png)

![](/images/blogimg/git/check_noadd1.png)

`git reset head filename`和`git checkout -- filename`如果修改之后并且已经add到缓存区，则可用这两个语句来恢复到修改之前的文件。`git reset head filename`相当于取消了add，即将该文件从缓存区中删除了，有一点需要注意一下就是无论你add多少次（没有commit的前提下），仅需一次reset即可取消所有的add.下图是我自己在做试验时的截图。

![](/images/blogimg/git/reset_add.png)

![](/images/blogimg/git/reset_add1.png)

####2.6 删除
`rm filename`从此盘中删除某个文件，该操作可通过`git checkout -- filename`来恢复。`git rm filename`是从git目录下删除文件，该操作是无法恢复的（不管有没有commit都不能恢复），只能通过通过头指针指向上一个commit节点（见上面2.4）来实现恢复。

![](/images/blogimg/git/disk_rm.png)

![](/images/blogimg/git/git_rm.png)



###<a id="3"></a>分支（Branch）
分支在git中扮演着重要的角色，尤其是对于分布式的相互协作。下面看一些常用的branch分支命令


> - `git remote add origin git_address`为本地git添加远程服务器。
> - `git push -u origin(远程默认主分支) master(本地默认主分支)`第一次push加上`-u`指令，在以后的push中就可以直接push就行了
> - `git branch`查看当前所处分支（带星号代表当前分支）
> - `git branch branchname`创建新的分支 
> - `git check branchname`分支之间的切换
> - `git checkout -b branchname`创建分支并直接切换到刚创建的分支，相当于上面两个命令的合并。


在一个分支里面（非主分支）里面新建、修改文件，只要没有add,commit操作，切回主分支的时候是可以看到刚刚新建、修改的文件，一旦add，commit之后在主分支是不可见的
####3.1 Merge（合并分支）命令

> - `git merge branchname`如果在主分支（master）下执行该命令，则直接合并master和branchname，master的头指针指向branchname的头指针（该操作并没有保存branchname，此时branchname和master相当于同一个分支）
> - `git merge --no-ff -m 'merge information ' branchname`如果在主分支（master）下执行该命令则保存dev且将dev和master合并，可以理解为相当于在master里面复制了一份dev(推荐这种操作)

####3.2 删除分支
> - `git branch -d branchname`删除某个分支，无法恢复
> - `git branch -D branchname`强制删除

###<a id="4"></a>tag
> - `git tag tagname`创建tag
> - `git check tag`检查当前所有tag
> - `git push --tags`向远程提交tag
> - `git tag -d tagname`删除本地tag
> - `git push origin :refs/tags/tagname`删除远程tag


###<a id="5"></a>更新
#####12月9号更新
---
######1.关于add和commit命令的合并

可用命令`git commit -am 'commit info'`但是该命令只能对已经存在的文件执行，若有新增文件，则git会报错。
######<a id="modify"></a>2.合并的问题
如果在某个分支上修改了某文件，然后add->commit，再回到主分支对同一文件进行修改，在add->commit，此时若进行合并，则会报错说修改有冲突，如果此时查看冲突，则可以看见如图所示的东西(Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容)。

![](/images/blogimg/git/merge_modify.png)

所以应该手动来修改,冲突修改好后，add->commit即可。修改完成后，history大致如图所示,也可以用`git log --graph --pretty=oneline --abbrev-commit`来产看合并之后的图表

![](/images/blogimg/git/merge_pic.png)
######3.重开分支
假设现在在dev分支上将代码已经进行到一半了，突然想起有个很明显的bug，但是又不想放弃当前的代码修改，这时可以在当前分支用git stash命令来将当前工作现场隐藏起来，然后在主分支（或其他非dev分支）上新建分支来修复bug，修复完后合并到主分支，再转到dev分支
可以通过以下两种方法来恢复之前隐藏的内容

`git stash apply`  恢复后，并没有删除stash隐藏的内容

`git stash pop`  恢复并删除stash隐藏的内容
######4.远程推送
向远程端push分支，`git push origin branchname`

查看远程库信息 `git remote -v`
`git checkout -b branchname origin/branchname` 在本地创建一个与远程分支名字一致的分支，然后可以修改分支内容然后向远程push.
当远程库与本地库有冲突的时候，（即在不同的电脑上向远程库提交代码），需要先把远程库pull 下来，但是仅仅git pull是不够的
因为没有指定本地分支与远程分支的链接。

需要先执行`git branch --set-upstream branchname origin/branchname`,然后再执行git pull命令即可。如果此时有文件修改冲突，解决该冲突后在add commit 即可。此时再push到远程即可。这个和前面  **_[2.合并的问题](#modify)_**  思路一致
######5.git的个性化
`git config --global color.ui true` // 显示颜色

`git config --global alias.st status` // 为status设置别名,也可以为其他命令设置别名 `git config --global alias.othername commandname`

也可以给一连串的命令设置别名.比如：`git config --global alias.unstage 'reset HEAD'`.

更多的个性化可参考[7.1 自定义 Git - 配置 Git](http://git-scm.com/book/zh/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git)

###<a id="6"></a>更多
#####各种dos/linux命令的解释
---
`ls`查看当前路径下的文件（无隐藏文件）

`ls -a`查看当前路径下所有的文件（含隐藏文件）

`vi filename`用vim修改（或新建）文件（文件需带后缀，下同），进入vim后按下i键进入编辑模式，编辑完成按下esc，再输入`：wq`即可退出编辑模式

`cat filename`显示文件内容

`cat >filename`只能创建新文件，不能编辑其内容

`cd ..`返回上级目录，`cd .`当前目录,`cd /`回到根目录

`pwd`查看当前目录的完整路径
#####参考资料：
> - [rogerdudler](http://rogerdudler.github.io/git-guide/index.zh.html)
> - [斯坦福大学](http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/)
> - [marklodato](http://marklodato.github.io/visual-git-guide/index-zh-cn.html#checkout)
> - [廖雪峰](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)
